using System;
using System.Linq;
using StarkBank.Utils;
using System.Collections.Generic;

namespace StarkBank
{
    /// <summary>
    /// CorporateBalance object
    /// <br/>
    /// The CorporateBalance object displays the current corporate balance of the Workspace,
    /// which is the result of the sum of all transactions within this
    /// Workspace. The balance is never generated by the user, but it
    /// can be retrieved to see the available information.
    /// <br/>
    /// Properties:
    /// <list>
    ///     <item>ID [string]: unique id returned when CorporateBalance is created. ex: "5656565656565656"</item>
    ///     <item>Amount [long]: current corporate balance amount of the Workspace in cents. ex: 200 (= R$ 2.00)</item>
    ///     <item>Limit [integer]: The maximum negative balance allowed by the user. ex: 10000 (= R$ 100.00)</item>
    ///     <item>MaxLimit [integer]: The maximum negative balance allowed by StarkBank. ex: 100000 (= R$ 1000.00)</item>
    ///     <item>Currency [string]: currency of the current Workspace. Expect others to be added eventually. ex: "BRL"</item>
    ///     <item>Updated [DateTime]: latest update DateTime for the CorporateBalance. ex: DateTime(2020, 3, 10, 10, 30, 0, 0)</item>
    /// </list>
    /// </summary>
    public class CorporateBalance : Resource
    {
        public long Amount { get; }
        public int Limit { get; }
        public int MaxLimit { get; }
        public string Currency { get; }
        public DateTime? Updated { get; }

        /// <summary>
        /// CorporateBalance object
        /// <br/>
        /// The CorporateBalance object displays the current corporate balance of the Workspace,
        /// which is the result of the sum of all transactions within this
        /// Workspace. The balance is never generated by the user, but it
        /// can be retrieved to see the available information.
        /// <br/>
        /// Attributes(return-only):
        /// <list>
        ///     <item>id [string]: unique id returned when CorporateBalance is created. ex: "5656565656565656"</item>
        ///     <item>amount [long]: current corporate balance amount of the Workspace in cents. ex: 200 (= R$ 2.00)</item>
        ///     <item>limit [integer]: The maximum negative balance allowed by the user. ex: 10000 (= R$ 100.00)</item>
        ///     <item>maxLimit [integer]: The maximum negative balance allowed by StarkBank. ex: 100000 (= R$ 1000.00)</item>
        ///     <item>currency [string]: currency of the current Workspace. Expect others to be added eventually. ex: "BRL"</item>
        ///     <item>updated [DateTime]: latest update DateTime for the CorporateBalance. ex: DateTime(2020, 3, 10, 10, 30, 0, 0)</item>
        /// </list>
        /// </summary>
        public CorporateBalance(string id, long amount, int limit, int maxLimit, string currency, DateTime? updated) : base(id)
        {
            Amount = amount;
            Limit = limit;
            MaxLimit = maxLimit;
            Currency = currency;
            Updated = updated;
        }

        /// <summary>
        /// Retrieve the CorporateBalance object
        /// <br/>
        /// Receive the CorporateBalance object linked to your Workspace in the Stark Bank API
        /// <br/>
        /// Parameters(optional):
        /// <list>
        ///     <item>user [Organization/Project object default null]: Organization or Project object. Not necessary if StarkBank.Settings.User was set before function call</item>
        /// </list>
        /// <br/>
        /// Return:
        /// <list>
        ///     <item>CorporateBalance object with updated attributes</item>
        /// </list>
        /// </summary>
        public static CorporateBalance Get(User user = null)
        {
            (string resourceName, StarkCore.Utils.Api.ResourceMaker resourceMaker) = Resource();
            return Rest.GetList(
                resourceName: resourceName,
                resourceMaker: resourceMaker,
                query: new Dictionary<string, object>(),
                user: user
            ).First() as CorporateBalance;
        }

        internal static (string resourceName, StarkCore.Utils.Api.ResourceMaker resourceMaker) Resource()
        {
            return (resourceName: "CorporateBalance", resourceMaker: ResourceMaker);
        }

        internal static Resource ResourceMaker(dynamic json)
        {
            string id = json.id;
            long amount = json.amount;
            int limit = json.limit;
            int maxLimit = json.maxLimit;
            string currency = json.currency;
            string updatedString = json.updated;
            DateTime updated = StarkCore.Utils.Checks.CheckDateTime(updatedString);

            return new CorporateBalance(id: id, amount: amount, limit: limit, maxLimit: maxLimit, currency: currency, updated: updated);
        }
    }
}
