using System;
using System.Linq;
using System.Collections.Generic;


namespace StarkBank
{
    /// <summary>
    /// Balance object
    /// 
    /// The Balance object displays the current balance of the workspace,
    /// which is the result of the sum of all transactions within this
    /// workspace.The balance is never generated by the user, but it
    /// can be retrieved to see the available information.
    /// 
    /// Attributes(return-only):
    ///     id [string, default None]: unique id returned when Boleto is created. ex: "5656565656565656"
    ///     amount [integer, default None]: current balance amount of the workspace in cents. ex: 200 (= R$ 2.00)
    ///     currency [string, default None]: currency of the current workspace. Expect others to be added eventually. ex: "BRL"
    ///     updated [datetime.datetime, default None]: update datetime for the balance. ex: datetime.datetime(2020, 3, 10, 10, 30, 0, 0)
    /// </summary>
    public class Balance : Utils.IResource
    {
        public string ID { get; }
        public int Amount { get; }
        public string Currency { get; }
        public DateTime Updated { get; }

        public Balance(string id, int amount, string currency, DateTime updated)
        {
            ID = id;
            Amount = amount;
            Currency = currency;
            Updated = updated;
        }

        /// <summary>
        /// Retrieve the Balance object
        /// 
        ///    Receive the Balance object linked to your workspace in the Stark Bank API
        ///
        /// Parameters(optional) :
        ///    user[Project object]: Project object. Not necessary if starkbank.user was set before function call
        /// Return:
        ///    Balance object with updated attributes
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public static Balance Get(User user = null)
        {
            (string resourceName, Utils.Api.ResourceMaker resourceMaker) = Resource();
            return Utils.Rest.GetList(
                resourceName: resourceName,
                resourceMaker: resourceMaker,
                query: new Dictionary<string, object>(),
                user: user
            ).First() as Balance;
        }

        internal static (string resourceName, Utils.Api.ResourceMaker resourceMaker) Resource()
        {
            return (resourceName: "Balance", resourceMaker: ResourceMaker);
        }

        internal static Utils.IResource ResourceMaker(dynamic json)
        {
            string id = json.id;
            int amount = json.amount;
            string currency = json.currency;
            string updatedString = json.updated;
            DateTime updated = Utils.Checks.CheckDateTime(updatedString);

            return new Balance(id: id, amount: amount, currency: currency, updated: updated);
        }
    }
}
