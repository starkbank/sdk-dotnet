using System;
using System.Linq;
using System.Collections.Generic;


namespace StarkBank
{
    /// <summary>
    /// # Transaction object
    /// 
    /// A Transaction is a transfer of funds between workspaces inside Stark Bank.
    /// Transactions created by the user are only for internal transactions.
    /// Other operations (such as transfer or charge-payment) will automatically
    /// create a transaction for the user which can be retrieved for the statement.
    /// When you initialize a Transaction, the entity will not be automatically
    /// created in the Stark Bank API. The 'create' function sends the objects
    /// to the Stark Bank API and returns the list of created objects.
    /// 
    /// ## Parameters (required):
    /// - amount [long integer]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
    /// - description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
    /// - external_id [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
    /// - received_id [string]: unique id of the receiving workspace. ex: "5656565656565656"
    /// 
    /// ## Parameters (optional):
    /// - tags [list of strings]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
    /// 
    /// ## Attributes (return-only):
    /// - source [string, default nil]: locator of the entity that generated the transaction. ex: "charge/1827351876292", "transfer/92873912873/chargeback"
    /// - id [string, default nil]: unique id returned when Transaction is created. ex: "7656565656565656"
    /// - fee [integer, default nil]: fee charged when transfer is created. ex: 200 (= R$ 2.00)
    /// - created [DateTime, default nil]: creation datetime for the boleto. ex: DateTime.new(2020, 3, 10, 10, 30, 0, 0)
    /// </summary>
    public class Transaction : Utils.Resource
    {
        public long Amount { get; }
        public string ExternalID { get; }
        public string ReceiverID { get; }
        public List<string> Tags { get; }
        public int? Fee { get; }
        public string Description { get; }
        public string Source { get; }
        public DateTime? Created { get; }

        public Transaction(long amount, string externalID, string receiverID, List<string> tags = null, string id = null,
            int? fee = null, string description = null, DateTime? created = null, string source = null) : base(id)
        {
            Amount = amount;
            ExternalID = externalID;
            ReceiverID = receiverID;
            Tags = tags;
            Fee = fee;
            Description = description;
            Source = source;
            Created = created;
        }

        /// <summary>
        /// # Create Transactions
        /// 
        /// Send a list of Transaction objects for creation in the Stark Bank API
        /// 
        /// ## Parameters (required):
        /// - transactions [list of Transaction objects]: list of Transaction objects to be created in the API
        /// 
        /// ## Parameters (optional):
        /// - user [Project object]: Project object. Not necessary if StarkBank.user was set before function call
        /// 
        /// ## Return:
        /// - list of Transaction objects with updated attributes
        /// </summary>
        public static List<Transaction> Create(List<Transaction> transactions, User user = null)
        {
            (string resourceName, Utils.Api.ResourceMaker resourceMaker) = Resource();
            return Utils.Rest.Post(
                resourceName: resourceName,
                resourceMaker: resourceMaker,
                entities: transactions,
                user: user
            ).ToList().ConvertAll(o => (Transaction)o);
        }

        /// <summary>
        /// # Retrieve a specific Transaction
        /// 
        /// Receive a single Transaction object previously created in the Stark Bank API by passing its id
        /// 
        /// ## Parameters (required):
        /// - id [string]: object unique id. ex: "5656565656565656"
        /// 
        /// ## Parameters (optional):
        /// - user [Project object]: Project object. Not necessary if StarkBank.user was set before function call
        /// 
        /// ## Return:
        /// - Transaction object with updated attributes
        /// </summary>
        public static Transaction Get(string id, User user = null)
        {
            (string resourceName, Utils.Api.ResourceMaker resourceMaker) = Resource();
            return Utils.Rest.GetId(
                resourceName: resourceName,
                resourceMaker: resourceMaker,
                id: id,
                user: user
            ) as Transaction;
        }

        /// <summary>
        /// Retrieve Transactions
        ///
        /// Receive a generator of Transaction objects previously created in the Stark Bank API
        ///
        /// ## Parameters (optional):
        /// - limit [integer, default nil]: maximum number of objects to be retrieved. Unlimited if nil. ex: 35
        /// - external_ids [list of strings, default nil]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        /// - after [Date, default nil] date filter for objects created only after specified date. ex: Date.new(2020, 3, 10)
        /// - before [Date, default nil] date filter for objects created only before specified date. ex: Date.new(2020, 3, 10)
        /// - user [Project object, default nil]: Project object. Not necessary if StarkBank.user was set before function call
        ///
        /// ## Return:
        /// - generator of Transaction objects with updated attributes
        /// </summary>
        public static IEnumerable<Transaction> Query(int? limit = null, List<string> externalIds = null,
            DateTime? after = null, DateTime? before = null, User user = null)
        {
            (string resourceName, Utils.Api.ResourceMaker resourceMaker) = Resource();
            return Utils.Rest.GetList(
                resourceName: resourceName,
                resourceMaker: resourceMaker,
                query: new Dictionary<string, object> {
                    { "limit", limit },
                    { "externalIds", externalIds },
                    { "after", after },
                    { "before", before }
                },
                user: user
            ).Cast<Transaction>();
        }

        internal static (string resourceName, Utils.Api.ResourceMaker resourceMaker) Resource()
        {
            return (resourceName: "Transaction", resourceMaker: ResourceMaker);
        }

        internal static Utils.Resource ResourceMaker(dynamic json)
        {
            string id = json.id;
            long amount = json.amount;
            string externalID = json.externalId;
            string receiverID = json.receiverId;
            List<string> tags = json.tags.ToObject<List<string>>();
            int fee = json.fee;
            string description = json.description;
            string source = json.source;
            string createdString = json.created;
            DateTime? created = Utils.Checks.CheckDateTime(createdString);

            return new Transaction(
                id: id, amount: amount, externalID: externalID, receiverID: receiverID, tags: tags, fee: fee,
                description: description, source: source, created: created
            );
        }
    }
}
